import requests
import telebot
import os
from pathlib import Path
from dotenv import load_dotenv
from utils import create_database, save_data_to_database
from config import config
import datetime
from telebot.apihelper import ApiException

params = config()
create_database('logs', params)

language = 'ru-RU'

BASE_DIR = Path(__file__).resolve().parent

dot_env = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path=dot_env)

TG_BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
API_KEY_WEATHER = os.getenv('API_KEY_WEATHER')

start_text = ("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ.\n"
              "–°–æ–∑–¥–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ BobrAi.\n"
              "–í–≤–µ–¥–∏—Ç–µ /weather <–≥–æ—Ä–æ–¥>.")

bot = telebot.TeleBot(TG_BOT_TOKEN)


def response_result(data, city):
    temp = int(data['list'][0]['main']['temp'])
    feels_like = data['list'][0]['main']['feels_like']
    pressure = int(data['list'][0]['main']['pressure']) * 0.75
    humidity = data['list'][0]['main']['humidity']
    wind_speed = int(data['list'][0]['wind']['speed'])
    rain = '–Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è' if data['list'][0]['rain'] is None else '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
    snow = '–Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è' if data['list'][0]['snow'] is None else '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
    weather = data['list'][0]['weather'][0]['description']
    return f'''
    –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city}

    –°–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C
    –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞
    ‚õÖÔ∏è{weather}‚õÖÔ∏è
    üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {wind_speed}–º/—Å üí®
    –î–∞–≤–ª–µ–Ω–∏–µ {pressure} –º–º —Ä—Ç.—Å—Ç.
    –í–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%
    üí¶ –î–æ–∂–¥—å {rain}
    ‚ùÑÔ∏è –°–Ω–µ–≥ {snow}
    '''


def request_weather(city):
    result = requests.get("https://ru.api.openweathermap.org/data/2.5/find",
                          params={
                              'q': city,
                              'type': 'like',
                              'units': 'metric',
                              'lang': 'ru',
                              'APPID': API_KEY_WEATHER,
                          }).json()
    if result['cod'] != '200':
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {result['cod']} {result['message']}"
    elif result['count'] == 0:
        return f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    else:
        return response_result(result, city)


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, start_text, parse_mode='Markdown')
    log_list = []
    log_list.append({'tg_id': message.from_user.id, 'command': message.text, 'data_time': str(datetime.datetime.now()), 'response':start_text})
    save_data_to_database('logs', log_list, config())
    print(log_list)


@bot.message_handler(commands=['weather'])
def get_weather(message):
    city = message.text.split()[1]
    result = request_weather(city)
    bot.send_message(message.from_user.id, f'{result}')
    log_list = []
    log_list.append(
        {'tg_id': message.from_user.id, 'command': message.text, 'data_time': str(datetime.datetime.now()), 'response': result})
    save_data_to_database('logs', log_list, config())
    print(log_list)


def main():
    # params = config()
    # create_database('logs', params)
    bot.polling(none_stop=True, interval=0)


if __name__ == '__main__':
    main()
    while True:
        try:
            main()
        except Exception as e:
            print(f'‚ùå‚ùå‚ùå‚ùå‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ! {e} ‚ùå‚ùå‚ùå‚ùå‚ùå')
